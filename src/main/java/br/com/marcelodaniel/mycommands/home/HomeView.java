/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package br.com.marcelodaniel.mycommands.home;

import br.com.marcelodaniel.mycommands.database.conditions.SqlWhere;
import br.com.marcelodaniel.mycommands.database.configuration.ConfigurationDatabaseHelper;
import br.com.marcelodaniel.mycommands.executor.ExecutorTask;
import br.com.marcelodaniel.mycommands.view.CheckboxListCellRenderer;
import org.json.JSONArray;
import org.json.JSONObject;
import org.json.XML;
import javax.swing.*;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * @author marcelo
 */
public class HomeView extends javax.swing.JFrame implements ExecutorTask.LoggerFactory {

    private String[] modulosLidos;

    private ConfigurationDatabaseHelper configurationDatabaseHelper;

    private List<Map<String, Object>> configuracoes;

    /**
     * Creates new form HomeView
     */
    public HomeView() {

        configurationDatabaseHelper = new ConfigurationDatabaseHelper();

        List<String> columns = new ArrayList<>();
        columns.add("chave");
        columns.add("valor");

        Map<String, Object> wheres = new HashMap<>();
        configuracoes = configurationDatabaseHelper.select("config", columns, wheres);


        initComponents();

        this.txFieldPathProject.setText(configuracoes.get(0).get("valor").toString());
        this.txFieldMavenPath.setText(configuracoes.get(1).get("valor").toString());
        loadModules();

        ArrayList<Map<String, Object>> valuesArr = new ArrayList<>();
        Map<String, Object> values = new HashMap<>();
        values.put(ConfigurationDatabaseHelper.KEY_PROJECT_PATH, txFieldPathProject.getText());
        values.put(ConfigurationDatabaseHelper.KEY_MAVEN_PATH, txFieldMavenPath.getText());
        valuesArr.add(values);

        List<SqlWhere> wheres2 = new ArrayList<>();
        wheres2.add(new SqlWhere("chave", SqlWhere.Condition.EQUAL, ConfigurationDatabaseHelper.KEY_PROJECT_PATH));

        configurationDatabaseHelper.update("config", valuesArr, wheres2);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFrame1 = new javax.swing.JFrame();
        txFieldMavenPath = new javax.swing.JTextField();
        btnPomSave = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        btnClean = new javax.swing.JButton();
        btnBuild = new javax.swing.JButton();
        btnCleanBuild = new javax.swing.JButton();
        txFieldPathProject = new javax.swing.JTextField();
        btnMavenSave = new javax.swing.JButton();
        chkSkipTests = new javax.swing.JCheckBox();
        jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        listCheckboxs = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtareaCmdLog = new javax.swing.JTextArea();

        jFrame1.setTitle("Maven GUI Builder");

        javax.swing.GroupLayout jFrame1Layout = new javax.swing.GroupLayout(jFrame1.getContentPane());
        jFrame1.getContentPane().setLayout(jFrame1Layout);
        jFrame1Layout.setHorizontalGroup(
                jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 400, Short.MAX_VALUE)
        );
        jFrame1Layout.setVerticalGroup(
                jFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        txFieldMavenPath.setText("mvn");
        txFieldMavenPath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txFieldMavenPathActionPerformed(evt);
            }
        });

        btnPomSave.setText("load");
        btnPomSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPomSaveActionPerformed(evt);
            }
        });

        jLabel1.setText("Adicione o path do projeto que tenha o \"pom.xml\". ( /var/www/myproject/ )");

        btnClean.setText("Clean");
        btnClean.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCleanActionPerformed(evt);
            }
        });

        btnBuild.setText("Build");
        btnBuild.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuildActionPerformed(evt);
            }
        });

        btnCleanBuild.setText("Clean and Build");
        btnCleanBuild.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCleanBuildActionPerformed(evt);
            }
        });

        txFieldPathProject.setText("/home/marcelo/Documentos/GitHub/trato-api");

        btnMavenSave.setText("save");
        btnMavenSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMavenSaveActionPerformed(evt);
            }
        });

        chkSkipTests.setSelected(true);
        chkSkipTests.setText("SkipTests");
        chkSkipTests.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkSkipTestsActionPerformed(evt);
            }
        });

        jSplitPane1.setDividerLocation(300);
        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        listCheckboxs.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = {};

            public int getSize() {
                return strings.length;
            }

            public String getElementAt(int i) {
                return strings[i];
            }
        });
        jScrollPane1.setViewportView(listCheckboxs);

        jSplitPane1.setTopComponent(jScrollPane1);

        txtareaCmdLog.setColumns(20);
        txtareaCmdLog.setRows(5);
        jScrollPane2.setViewportView(txtareaCmdLog);

        jSplitPane1.setRightComponent(jScrollPane2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jSplitPane1)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(chkSkipTests)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(btnClean)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(btnCleanBuild)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(btnBuild))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addGap(0, 0, Short.MAX_VALUE)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                        .addComponent(txFieldPathProject, javax.swing.GroupLayout.DEFAULT_SIZE, 755, Short.MAX_VALUE)
                                                        .addComponent(txFieldMavenPath))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                        .addComponent(btnPomSave, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(btnMavenSave, javax.swing.GroupLayout.Alignment.LEADING)))
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel1)
                                                .addGap(0, 0, Short.MAX_VALUE)))
                                .addContainerGap())
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(23, 23, 23)
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(btnPomSave)
                                        .addComponent(txFieldPathProject, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(txFieldMavenPath, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(btnMavenSave))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 560, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(btnBuild)
                                        .addComponent(btnCleanBuild)
                                        .addComponent(btnClean)
                                        .addComponent(chkSkipTests))
                                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCleanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCleanActionPerformed
        StringBuilder builder = new StringBuilder();
        builder.append(txFieldMavenPath.getText());
        builder.append(" -f ");
        builder.append(txFieldPathProject.getText() + "/pom.xml");
        builder.append(" clean");

        int[] selecionados = listCheckboxs.getSelectedIndices();
        for (int selecionado : selecionados) {
            builder.append(" -pl " + modulosLidos[selecionado]);
        }

        builder.append(" -am");

        if (chkSkipTests.isSelected()) {
            builder.append(" -Dmaven.test.skip=true ");
        } else {
            builder.append(" -Dmaven.test.skip=false ");
        }

        System.out.println(builder.toString());

        try {
            runCommand(builder.toString());
        } catch (Exception e) {
            e.printStackTrace();
        }

    }//GEN-LAST:event_btnCleanActionPerformed

    private void btnCleanBuildActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCleanBuildActionPerformed
        try {
            StringBuilder builder = new StringBuilder();
            builder.append(txFieldMavenPath.getText());
            builder.append(" clean install");

            int[] selecionados = listCheckboxs.getSelectedIndices();
            for (int selecionado : selecionados) {
                builder.append(" -pl " + modulosLidos[selecionado]);
            }

            builder.append(" -am");

            if (chkSkipTests.isSelected()) {
                builder.append(" -Dmaven.test.skip=true ");
            } else {
                builder.append(" -Dmaven.test.skip=false ");
            }

            builder.append(" -f ");
            builder.append(txFieldPathProject.getText() + "/pom.xml");

            System.out.println(builder.toString());

            runCommand(builder.toString());
        } catch (IOException ex) {
            Logger.getLogger(HomeView.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InterruptedException ex) {
            Logger.getLogger(HomeView.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnCleanBuildActionPerformed

    private void btnPomSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPomSaveActionPerformed
        loadModules();
    }//GEN-LAST:event_btnPomSaveActionPerformed

    private void loadModules() {
        listCheckboxs.setCellRenderer(new CheckboxListCellRenderer());
        listCheckboxs.setSelectionModel(new DefaultListSelectionModel() {
            public void setSelectionInterval(int index0, int index1) {
                if (isSelectedIndex(index0)) {
                    super.removeSelectionInterval(index0, index1);
                } else {
                    super.addSelectionInterval(index0, index1);
                }
            }
        });

        try {

          // TODO salvar configs

            File pomFile = new File(txFieldPathProject.getText() + "/pom.xml");

            String readFileTxt = readFile(pomFile);

            if (readFileTxt != null) {
                JSONObject json = XML.toJSONObject(readFileTxt);

                JSONArray dependencies = json.getJSONObject("project").getJSONObject("modules").getJSONArray("module");

                modulosLidos = new String[dependencies.length()];
                for (int i = 0; i < dependencies.length(); i++) {
                    modulosLidos[i] = dependencies.getString(i);
                }
                listCheckboxs.setListData(modulosLidos);

            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private String readFile(File file) throws IOException {

        if (!file.exists())
            return null;

        BufferedReader reader = new BufferedReader(new FileReader(file));
        String line = null;
        StringBuilder stringBuilder = new StringBuilder();
        String ls = System.getProperty("line.separator");

        try {
            while ((line = reader.readLine()) != null) {
                stringBuilder.append(line);
                stringBuilder.append(ls);
            }

            return stringBuilder.toString();
        } finally {
            reader.close();
        }
    }

    private synchronized void runCommand(String cmd) throws IOException, InterruptedException {
//        Process proc = Runtime.getRuntime().exec(cmd);
//        BufferedReader reader =
//              new BufferedReader(new InputStreamReader(proc.getInputStream()));
//
//        String line = "";
//        while((line = reader.readLine()) != null) {
//            loggerCmd.sendLine(line + "\n");
//        }
//
//        proc.waitFor();


        ExecutorTask task = new ExecutorTask(cmd, this);
        Thread executorThread = new Thread(task);
        executorThread.start();

    }

    private void txFieldMavenPathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txFieldMavenPathActionPerformed
    }//GEN-LAST:event_txFieldMavenPathActionPerformed

    private void btnMavenSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMavenSaveActionPerformed
        // TODO refatorar para salvar no banco os novos paths
//            configurationFactory.addProjectPath(txFieldPathProject.getText());
//            configurationFactory.addMavenPath(txFieldMavenPath.getText());
    }//GEN-LAST:event_btnMavenSaveActionPerformed


    private void btnBuildActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuildActionPerformed
        StringBuilder builder = new StringBuilder();
        builder.append(txFieldMavenPath.getText());
        builder.append(" -f ");
        builder.append(txFieldPathProject.getText() + "/pom.xml");
        builder.append(" install");

        int[] selecionados = listCheckboxs.getSelectedIndices();
        for (int selecionado : selecionados) {
            builder.append(" -pl " + modulosLidos[selecionado]);
        }

        builder.append(" -am");

        if (chkSkipTests.isSelected()) {
            builder.append(" -Dmaven.test.skip=true ");
        } else {
            builder.append(" -Dmaven.test.skip=false ");
        }

        System.out.println(builder.toString());
        try {
            runCommand(builder.toString());
        } catch (Exception e) {
            e.printStackTrace();
        }

    }//GEN-LAST:event_btnBuildActionPerformed

    private void chkSkipTestsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkSkipTestsActionPerformed

    }//GEN-LAST:event_chkSkipTestsActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBuild;
    private javax.swing.JButton btnClean;
    private javax.swing.JButton btnCleanBuild;
    private javax.swing.JButton btnMavenSave;
    private javax.swing.JButton btnPomSave;
    private javax.swing.JCheckBox chkSkipTests;
    private javax.swing.JFrame jFrame1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JList<String> listCheckboxs;
    private javax.swing.JTextField txFieldMavenPath;
    private javax.swing.JTextField txFieldPathProject;
    private javax.swing.JTextArea txtareaCmdLog;

    @Override
    public void sendLine(String line) {
        txtareaCmdLog.append(line + "\n");
        txtareaCmdLog.setCaretPosition(txtareaCmdLog.getDocument().getLength());
    }
    // End of variables declaration//GEN-END:variables
}
